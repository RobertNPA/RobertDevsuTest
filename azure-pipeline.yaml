trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  
  ImageName: 'devsu-app'
  Tag: '$(Build.BuildId)'
  DockerHubConnection: 'RobertDockerHub'
  DockerHubUser: 'robertperezinaipi' 
  KubernetesClusterConnection: 'robertaks-cluster' 


stages:
- stage: Build
  displayName: 'Build and Push'
  jobs:
  - job: Build
    displayName: 'Build Devsu App'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node'

    - script: npm install
      displayName: 'Install Dependencies'

    - script: npm run lint
      displayName: 'Static Code Analysis'

    - script: npm test
      displayName: 'Test'

    - script: npm test:coverage
      displayName: 'Test Coverage'
          
    - task: Docker@2
      displayName: 'Build and Push'
      inputs:
        command: buildAndPush
        repository: '$(DockerHubUser)/$(ImageName)'
        dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        containerRegistry: '$(DockerHubConnection)'
        tags: |
          $(Tag)
          latest


- stage: Deploy
  displayName: 'Deploy AKS'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployAKS
    displayName: 'Deploy AKS'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'manifests'
              downloadPath: '$(System.ArtifactsDirectory)'

          - task: KubernetesManifest@1
            displayName: 'Deploy Kubernetes'
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: '$(KubernetesClusterConnection)'
              namespace: 'default'
              manifests: |
                $(System.ArtifactsDirectory)/manifests/configmap.yaml
                $(System.ArtifactsDirectory)/manifests/deployment.yaml
                $(System.ArtifactsDirectory)/manifests/service.yaml
                $(System.ArtifactsDirectory)/manifests/hpa.yaml
                $(System.ArtifactsDirectory)/manifests/ingress.yaml
              containers: |
                '$(DockerHubUser)/$(ImageName):$(Tag)' 